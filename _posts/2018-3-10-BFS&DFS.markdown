---
layout: post
title:  "BFS&DFS in Python"
date:   2018-3-10 12:44:00
categories: Algorithm
tags: Algorithm
---

* content
{:toc}

## Summary
Use a queue to implement this algorithm. If weight of each edge is same, we can use only BFS to traverse the graph to achieve shortest path. In dijkstra with adjacency list, BFS is used when we traverse the graph.

* Initialize a graph with dic using set as value

```python
graph = {'A': set(['B', 'C']),
         'B': set(['A', 'D', 'E']),
         'C': set(['A', 'F']),
         'D': set(['B']),
         'E': set(['B', 'F']),
         'F': set(['C', 'E'])}
```

* The loop version of BFS

```python
def bfs(graph, start):
    visited, queue = set(), [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)
    return visited

print(bfs(graph, 'A'))# {'B', 'C', 'A', 'F', 'D', 'E'}
```

* The recursion version of BFS

```python
#first result is the shortest path
def shortest_path(graph, start, goal):
    try:
        return next(bfs_paths(graph, start, goal))
    except StopIteration:
        return None

print("Shortest path is: ", shortest_path(graph, 'A', 'F'))# ['A', 'C', 'F']
```

* Use generator to return all of the paths when implementing BFS

```python
def bfs_paths(graph, start, goal):
    queue = [(start, [start])]
    while queue:
        (vertex, path) = queue.pop(0)#here deque with leftpop() O(1) is better than queue pop(0) O(n)
        for next in graph[vertex] - set(path):
            if next == goal:
                yield path + [next]
            else:
                queue.append((next, path + [next]))

print(list(bfs_paths(graph, 'A', 'F')))# [['A', 'C', 'F'], ['A', 'B', 'E', 'F']]
```

* The loop version of DFS

```python
def dfs(graph, start):
    visited, stack = set(), [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited

print(dfs(graph, 'A'))# {'E', 'D', 'F', 'A', 'C', 'B'}
```

* The recursion version of DFS

```python
def dfs_recursion(graph, start, visited = None):
    if visited is None:
        visited = set()
    visited.add(start)
    for next in graph[start] - visited:
        dfs_recursion(graph, next, visited)
    return visited

print(dfs_recursion(graph, 'A'))# {'E', 'D', 'F', 'A', 'C', 'B'}
```

* Use generator to return all of the possible paths between a start and goal vertex

```python
def dfs_paths(graph, start, goal):
    stack = [(start, [start])]
    while stack:
        (vertex, path) = stack.pop()
        for next in graph[vertex] - set(path):
            if next == goal:
                yield path + [next]
            else:
                stack.append((next, path + [next]))

print(list(dfs_paths(graph, 'A', 'F')))#[['A', 'C', 'F'], ['A', 'B', 'E', 'F']]
```

 * Use `yield from` to implement code above
 
```python
def dfs_paths_yield_from(graph, start, goal, path = None):
    if path is None:
        path = [start]
    if start == goal:
        yield path
    for next in graph[start] - set(path):
        yield from dfs_paths_yield_from(graph, next, goal, path + [next])

print(list(dfs_paths_yield_from(graph, 'C', 'F')))# [['C', 'F'], ['C', 'A', 'B', 'E', 'F']]
```
